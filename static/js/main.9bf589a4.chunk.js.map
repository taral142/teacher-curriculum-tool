{"version":3,"sources":["components/Task/index.js","components/TaskFrom/index.js","components/TaskList/index.js","App.js","serviceWorker.js","index.js"],"names":["Task","tasks","handleOnChange","handleEdit","handleOkBtn","handleIndent","handleOutdent","handleDelete","map","task","index","className","key","onClick","isInEditMode","type","defaultValue","text","onChange","e","id","style","marginLeft","margin","color","borderBottom","TaskForm","props","useState","input","setInput","handleSubmit","preventDefault","onSubmit","Math","floor","random","parent","children","alert","target","value","placeholder","TaskList","JSON","parse","localStorage","getItem","setTasks","updetedText","setText","newTasks","setItem","stringify","push","updetedTask","t","findIndex","updatedtask","console","log","tempArray","i","length","filter","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9bf589a4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './style.css'\r\n\r\n\r\n\r\nconst Task = ({tasks,handleOnChange,handleEdit,handleOkBtn,handleIndent,handleOutdent,handleDelete}) => {\r\n\r\n  \r\n  return tasks.map( (task,index) => (\r\n    \r\n    \r\n    <div className=\"row\">\r\n        <div key={index} className=\"task-row\">\r\n            \r\n            <div className=\"task-icones\">\r\n                <i className=\"fas fa-expand-arrows-alt\"></i>\r\n                <i onClick={() => handleOutdent(task)} className=\"fas fa-outdent\"></i>\r\n                <i onClick={() => handleIndent(task)} className=\"fas fa-indent\"></i>\r\n                <i onClick={() => handleDelete(task)} className=\"fas fa-trash-alt\"></i>\r\n            </div>\r\n\r\n            {task.isInEditMode ? \r\n\r\n                <div className=\"task-box-input\">\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={task.text}\r\n                        onChange={(e) => handleOnChange(e)}\r\n                    />\r\n                    <button onClick={() => handleEdit(task.id)}><i className=\"far fa-window-close\"></i></button>\r\n                    <button onClick={() =>  handleOkBtn({id: task.id})}><i className=\"far fa-check-circle\"></i></button>\r\n                </div>\r\n                :\r\n                <div className=\"task-box\" style={{marginLeft: `${task.margin}px`}}> \r\n                    <div className=\"task-text\" style={{color:`${task.color}`,borderBottom: `1.5px solid ${task.color}`}} onClick={() => handleEdit(task.id)}>\r\n                        {task.text}\r\n                    </div>\r\n                </div>\r\n            }\r\n            \r\n        </div>\r\n    </div>\r\n    \r\n  ))\r\n    \r\n   \r\n\r\n }\r\n\r\nexport default Task","import React, { useState } from 'react'\r\nimport './style.css'\r\n\r\n\r\n\r\nconst TaskForm = (props) => {\r\n\r\n    const [input,setInput] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(input!=='')\r\n        {\r\n            props.onSubmit({\r\n                id: Math.floor(Math.random()*1000),\r\n                text: input,\r\n                isInEditMode: false,\r\n                parent: [],\r\n                children: [],\r\n                margin: 0,\r\n                color: 'darkblue',\r\n            })\r\n        }\r\n        else\r\n            alert('taskfield cannot be empty');\r\n        \r\n\r\n        setInput('');\r\n    }\r\n\r\n  return(\r\n\r\n        <div className=\"task-form\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                type='text'\r\n                onChange={handleChange}\r\n                value={input}\r\n                placeholder=\"enter task\"\r\n                />\r\n                <button onClick={handleSubmit}>\r\n                    Add\r\n                </button>\r\n\r\n            </form>\r\n            \r\n        </div>\r\n        \r\n    \r\n   )\r\n\r\n }\r\n\r\nexport default TaskForm","import React, { useState } from 'react'\r\nimport Task from '../Task';\r\nimport TaskForm from '../TaskFrom';\r\nimport './style.css'\r\n\r\n\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const [tasks,setTasks] = useState(JSON.parse(localStorage.getItem('tasks')));\r\n    const [updetedText,setText] = useState('');\r\n\r\n    const addTask = (task) => {\r\n        if(task.text === null)\r\n            return;\r\n\r\n        let newTasks = [];\r\n        if(localStorage.getItem('tasks') == null)\r\n        {\r\n          newTasks=[...tasks,task]\r\n          localStorage.setItem('tasks',JSON.stringify(newTasks))\r\n        }\r\n        else\r\n        {\r\n          newTasks=JSON.parse(localStorage.getItem('tasks'));\r\n          newTasks.push(task);\r\n          localStorage.setItem('tasks',JSON.stringify(newTasks));\r\n        }\r\n        setTasks(JSON.parse(localStorage.getItem('tasks')));\r\n    }\r\n\r\n    const handleEdit = (id) => {\r\n      const updetedTask = tasks.map( (t) => {\r\n          if(t.id===id)\r\n            t.isInEditMode = !t.isInEditMode;\r\n          return t;\r\n      })\r\n      setTasks(updetedTask);\r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n      setText(e.target.value);\r\n    }\r\n\r\n    const handleOkBtn = (t) => {\r\n      const updetedTask = tasks.map( (task) => {\r\n          if(task.id===t.id)\r\n          {\r\n            task.isInEditMode = !task.isInEditMode\r\n            task.text = updetedText;\r\n          }\r\n          return task;\r\n      })\r\n      setTasks(updetedTask);\r\n\r\n    }\r\n\r\n    const handleIndent = (task) => {\r\n      let index = tasks.findIndex( (t) => t.id === task.id);\r\n      if(index!==0)\r\n      {\r\n        const updatedtask = tasks.map((t) => {\r\n          if(t.id===task.id)\r\n          {\r\n            if(t.margin!=60)\r\n              t.margin += 30;\r\n  \r\n            if(t.margin===30)\r\n              t.color='black';\r\n            if(t.margin===60)\r\n              t.color='gray'\r\n          }\r\n          return t;\r\n        })\r\n        setTasks(updatedtask);\r\n        localStorage.setItem('tasks',JSON.stringify(updatedtask));\r\n      }\r\n    \r\n      console.log(task.margin);\r\n\r\n    }\r\n\r\n\r\n    \r\n    const handleOutdent = (task) => {\r\n      \r\n      let index = tasks.findIndex( (t) => t.id === task.id);\r\n      if(index!==0)\r\n      {\r\n        const updatedtask = tasks.map((t) => {\r\n          if(t.id===task.id)\r\n          {\r\n            if(t.margin!==0)\r\n              t.margin -= 30;\r\n            \r\n            if(t.margin===0)\r\n              t.color='blue'\r\n            if(t.margin===30)\r\n              t.color='black';\r\n          }\r\n          return t;\r\n        })\r\n        setTasks(updatedtask);\r\n        localStorage.setItem('tasks',JSON.stringify(updatedtask));\r\n      }\r\n      \r\n    }\r\n\r\n    const handleDelete = (task) => {\r\n      let index = tasks.findIndex( (t) => t.id === task.id);\r\n      const tempArray = [];\r\n      tempArray.push(task.id);\r\n\r\n      if(task.color==='darkblue')\r\n      {\r\n        for(let i=index+1;i<tasks.length;i++)\r\n        {\r\n          if(tasks[i].color!=='darkblue')\r\n            tempArray.push(tasks[i].id);\r\n          else\r\n            break;\r\n        }\r\n      }\r\n      else if(task.color==='black')\r\n      {\r\n        for(let i=index+1;i<tasks.length;i++)\r\n        {\r\n          if(tasks[i].color!=='darkblue' && tasks[i].color!=='black')\r\n            tempArray.push(tasks[i].id);\r\n          else  \r\n            break;\r\n        }\r\n      }\r\n      \r\n      const newTasks = tasks.filter( (t) => !tempArray.includes(t.id))\r\n      localStorage.setItem('tasks',JSON.stringify(newTasks));\r\n      setTasks(newTasks);  \r\n    }\r\n    \r\n\r\n\r\n\r\n  return(\r\n    <div className=\"tool-container\">\r\n      <div className=\"header\">\r\n        <div className=\"basic-details\"> \r\n          <p>SUBJECT: <span className=\"s\">MATHEMATICS</span></p>\r\n          <p>STANDARD: <span className=\"s\">10th</span></p>\r\n        </div>\r\n        <div className=\"task-input\">\r\n          <TaskForm onSubmit={addTask}/>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"tasks\">\r\n        <Task \r\n        tasks={tasks} \r\n        handleEdit={handleEdit} \r\n        handleOkBtn={handleOkBtn}\r\n        handleIndent={handleIndent}\r\n        handleOutdent={handleOutdent}\r\n        handleDelete={handleDelete}\r\n        updetedText={updetedText}\r\n        handleOnChange={handleOnChange}\r\n        />\r\n      </div>\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default TaskList","import React from 'react';\nimport './App.css';\nimport TaskList from './components/TaskList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}